//Company maintains employee information as employee ID, name, designation and salary.
Allow user to add, delete information of employee. Display information of particular
employee. If employee does not exist an appropriate message is displayed. If it is, then
the system displays the employee details. Use index sequential file to maintain the data. //



//Group F Q24
#include<iostream>
#include<fstream>
#include<cstring>
using namespace std;
class empRec
 {

 public:
 int empId, salary;
 char name[10],design[10];
 
 void accept()
 {
  cout<<"\n\tEnter Emp ID : ";
  cin>>empId;
  cout<<"\n\tEnter the Name of Emp : ";
  cin>>name;
  cout<<"\n\tEnter the Designation :";
  cin>>design;
  cout<<"\n\tEnter the salary:";
  cin>>salary;
  
 }
        
  void show()
  {

  cout<<"\n\t"<<empId<<"\t"<<name<<"\t"<<design<<"\t"<<salary;
  }
};
int main()
{
 int n,ch,ch1,rec,count;
 
 empRec t1;
 count=0;
 fstream g,f;
 do
 {
  cout<<"\n>>>>>>>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<";
  cout<<"\n1.Add Employee Record";
  cout<<"\n2.Display All Employee Record";
  cout<<"\n3.Search Employee";
  cout<<"\n4.Delete a Employee Record";
  cout<<"\n5.Exit";
  cout<<"\n\tEnter the Choice\t:";
  cin>>ch;
  switch(ch)
  {
  case 1:
   f.open("EmpRecord.txt",ios::out);
   x:t1.accept();
   f.write((char*) &t1,(sizeof(t1)));
   cout<<"\nDo you want to enter more records?\n1.Yes\n2.No";
   cin>>ch1;
    if(ch1==1)
     goto x;
    else
    {
     f.close();
     break;
    }

  case 2:
   f.open("EmpRecord.txt",ios::in);
   f.read((char*) &t1,(sizeof(t1)));
   cout<<"\n\tEmpId\t\tName \t\t Designation \t\t salary";
   while(f)
   {
    t1.show();
    f.read((char*) &t1,(sizeof(t1)));
   }
   f.close();
   break;
  
  case 3:
   cout<<"\nEnter the emp ID you want to find";
   cin>>rec;
   f.open("EmpRecord.txt",ios::in);
   f.read((char*)&t1,(sizeof(t1)));
   while(f)
   {
    if(rec==t1.empId)
    {
        count++;
     cout<<"\nRecord found";
      t1.show();
    } 
     f.read((char*)&t1,(sizeof(t1)));
   }
     
   if(count==0)
          cout<<"\nRecord not found";
   f.close();
   break;

  case 4:
      int eid;
      cout<<"Please Enter the Emp ID. of Employee Whose Info You Want to Delete: ";
     cin>>eid;
     f.open("EmpRecord.txt",ios::in);
     g.open("temp.txt",ios::out);
     f.read((char *)&t1,sizeof(t1));
     while(!f.eof())
     {
        if (t1.empId != eid)
           g.write((char *)&t1,sizeof(t1));
         f.read((char *)&t1,sizeof(t1));
     }
    cout << "The record with the roll no. " << eid << " has been deleted " << endl;
     f.close();
     g.close();
     remove("EmpRecord.txt");
     rename("temp.txt","EmpRecord.txt");
      break;
    }
  }while(ch<5);
}




Certainly! Here's a brief explanation of the code:

1. The code defines a class `empRec` to represent an employee record. It has member variables `empId`, `salary`, `name`, and `design`. It also contains member functions `accept()` and `show()` to input and display employee records, respectively.

2. The `main()` function is where the program execution starts. It presents a menu to the user and performs different operations based on the user's choice.

3. If the user selects option 1, the code opens the file "EmpRecord.txt" in output mode (`ios::out`). It then enters a loop labeled `x` to accept employee records from the user using the `accept()` function. Each record is written to the file using the `write()` function. After each record, the code asks the user if they want to enter more records. If the user chooses to enter more records, the loop continues; otherwise, the file is closed and the loop breaks.

4. If the user selects option 2, the code opens the file "EmpRecord.txt" in input mode (`ios::in`). It then enters a loop to read each employee record from the file using the `read()` function. The `show()` function is used to display each record on the console. Once all records are displayed, the file is closed.

5. If the user selects option 3, the code asks the user to enter the employee ID they want to search for. It then opens the file "EmpRecord.txt" in input mode and reads each record using the `read()` function. If a record with a matching employee ID is found, it is displayed using the `show()` function. If no matching record is found, a message is displayed indicating that the record was not found. Finally, the file is closed.

6. If the user selects option 4, the code asks the user to enter the employee ID of the record they want to delete. It opens the input file and a temporary output file. It reads each record from the input file, and if the employee ID does not match the one to be deleted, it writes the record to the temporary output file. After processing all records, the input and output files are closed, and the original file is deleted. Finally, the temporary file is renamed to replace the original file.

7. The menu loop continues until the user chooses option 5 to exit the program.

That's a brief explanation of the code. It provides basic functionality for managing employee records using file handling in C++.
