//Represent a given graph using adjacency matrix/list to perform DFS and using adjacency
list to perform BFS. Use the map of the area around the college as the graph. Identify the
prominent land marks as nodes and perform DFS and BFS on that.//



//grpCq13


#include <iostream>
#include <stdlib.h>
using namespace std;

int cost[10][10], i, j, k, n, qu[10], front, rear, v, visit[10], visited[10];
int stk[10], top, visit1[10], visited1[10];

int main()
{
    int m;
    cout << "Enter number of vertices : ";
    cin >> n;
    cout << "Enter number of edges : ";
    cin >> m;
    
    cout << "\nEnter EDGES : i j :\n";
    for (k = 1; k <= m; k++)
    {
        cin >> i >> j;
        cost[i][j] = 1;
        cost[j][i] = 1;
    }
    
    //display function
    cout << "The adjacency matrix of the graph is : " << endl;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << " " << cost[i][j];
        }
        cout << endl;
    }
    
    cout << "Enter initial vertex for BFS Traversal : ";
    cin >> v;
    cout << "The BFS of the Graph is\n";
    cout << v<<endl;
    visited[v] = 1;
    k = 1;
    while (k < n)
    {
        for (j = 1; j <= n; j++)
            if (cost[v][j] != 0 && visited[j] != 1 && visit[j] != 1)
            {
                visit[j] = 1;
                qu[rear++] = j;
            }
        v = qu[front++];
        cout << v << " ";
        k++;
        visit[v] = 0;
        visited[v] = 1;
    }
    
    cout <<endl<<"Enter initial vertex for DFS Traversal: ";
    cin >> v;
    cout << "The DFS of the Graph is\n";
    cout << v<<endl;
    visited[v] = 1;
    k = 1;
    while (k < n)
    {
        for (j = n; j >= 1; j--)
            if (cost[v][j] != 0 && visited1[j] != 1 && visit1[j] != 1)
            {
                visit1[j] = 1;
                stk[top] = j;
                top++;
            }
        v = stk[--top];
        cout << v << " ";
        k++;
        visit1[v] = 0;
        visited1[v] = 1;
    }

    return 0;
}


This code implements breadth-first search (BFS) and depth-first search (DFS) traversal algorithms on a graph represented by an adjacency matrix.

Here's a brief explanation of the code:

1. The code defines various variables including `cost` for the adjacency matrix, `qu` for the queue used in BFS, `stk` for the stack used in DFS, and arrays `visit`, `visited`, `visit1`, and `visited1` to keep track of visited vertices.

2. The main function prompts the user to enter the number of vertices and edges in the graph.

3. It then asks the user to enter the edges of the graph by specifying the vertices connected by each edge.

4. The adjacency matrix is constructed based on the user's input.

5. The adjacency matrix is displayed on the console.

6. The user is prompted to enter the initial vertex for BFS traversal.

7. BFS traversal is performed starting from the initial vertex. It uses a queue to process vertices in a breadth-first manner. The visited vertices are marked using the `visited` array.

8. The BFS traversal sequence is displayed on the console.

9. The user is prompted to enter the initial vertex for DFS traversal.

10. DFS traversal is performed starting from the initial vertex. It uses a stack to process vertices in a depth-first manner. The visited vertices are marked using the `visited1` array.

11. The DFS traversal sequence is displayed on the console.

12. The program ends.

Please note that this code assumes the graph is undirected and does not consider weights/costs associated with edges. It also assumes that the vertices are numbered from 0 to n-1.
